import os
import sys

# Ned's .pdbrc
# source: http://nedbatchelder.com/blog/200704/my_pdbrc.html

# other pdbrc alias source
# source: https://github.com/jmcantrell/dotfiles/blob/8590c5af3c68c7ec2b52f7151f8ca5f2bb54bf9a/sh/.pdbrc

# # Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
# alias p_ for k in sorted(%1.keys()): print "%s%-15s= %-80.80s" % ("%2",k,repr(%1[k]))
#
# # Print the member variables of a thing.
# alias pi p_ %1.__dict__ %1.
#
# # Print the member variables of self.
# alias ps pi self
#
# # Print the locals.
# alias pl p_ locals() local:
#
# # Next and list, and step and list.
# alias nl n;;l
# alias sl s;;l
#
# # source: https://greek0.net/blog/2015/05/28/neat_python_debugger_command/
# # Print contents of an object's class (including bases).
# alias pc for k,v in sorted({k:v for cls in reversed(%1.__class__.__mro__) for k,v in cls.__dict__.items() if cls is not object}.items()): print("%s%-20s= %-80.80s" % ("%1.",k,repr(v)))
#
# # Short cuts for walking up and down the stack
# alias uu u;;u
# alias uuu u;;u;;u
# alias uuuu u;;u;;u;;u
# alias uuuuu u;;u;;u;;u;;u
# alias dd d;;d
# alias ddd d;;d;;d
# alias dddd d;;d;;d;;d
# alias ddddd d;;d;;d;;d;;d
#
# from datetime import datetime
# alias nn start_time=datetime.now();; n;; l;; print 'elapsed: %.03f'%(datetime.now() - start_time).total_seconds();;

# ######################################################################################################################
# # NOTE: Begin - https://github.com/jmcantrell/dotfiles/blob/8590c5af3c68c7ec2b52f7151f8ca5f2bb54bf9a/sh/.pdbrc
# # print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
# alias pd for k in sorted(%1.keys()): print "%s%-15s= %-80.80s" % ("%2",k,repr(%1[k]))
#
# # print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
# alias pd for k in sorted(%1.keys()): print "%s%-15s= %-80.80s" % ("%2",k,repr(%1[k]))
#
# # print the instance variables
# alias pi pd %1.__dict__ %1.
#
# # print the instance variables on self
# alias ps pi self
#
# # print the locals
# alias pl pd locals() local:
#
# alias nl n;;l  # step over, list
# alias sl s;;l  # step into, list
# alias cl c;;l  # continue, list
#
# # always list the current line, even if you already listed it
# alias ll u;;d;;l
#
# # short cuts for walking up and down the stack
# alias uu u;;u
# alias uuu u;;u;;u
# alias uuuu u;;u;;u;;u
# alias uuuuu u;;u;;u;;u;;u
# alias dd d;;d
# alias ddd d;;d;;d
# alias dddd d;;d;;d;;d
# alias ddddd d;;d;;d;;d;;d
#
# # .pdbrc only allows for debugger commands; you cannot insert Python
# # scripts.
#
# # To overcome this restriction, this .pdbrc executes ~/.pdbrc.py,
# # which can contain arbitrary Python commands (including a call to a
# # local pdbrc.py (no leading dot!) in your working directory if it
# # exists).
#
# # If ~/.pdbrc.py is missing, you get an error message (which doesn't hurt).
# # execfile(os.path.expanduser('~/.pdbrc.py'))
# ######################################################################################################################

######################################################################################################################
# source: https://github.com/storax/storaxcastle/blob/ed3a3930030c964eac86849eca96c077109f85be/home/.pdbrc
# Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
alias p_ for k in sorted(%1.keys()): print("%s%-15s= %-80.80s" % ("%2",k,repr(%1[k])))

# Print the instance variables of a thing.
alias pi p_ dir(%1) %1.

# Print the instance variables of self.
alias ps pi self

# Print the locals.
alias pl p_ locals() local:

# Next and list, and step and list.
alias nl n;;l
alias sl s;;l

# Short cuts for walking up and down the stack
alias uu u;;u
alias uuu u;;u;;u
alias uuuu u;;u;;u;;u
alias uuuuu u;;u;;u;;u;;u
alias dd d;;d
alias ddd d;;d;;d
alias dddd d;;d;;d;;d
alias ddddd d;;d;;d;;d;;d

# Print contents of an object's class (including bases).
alias pc for k,v in sorted({k:v for cls in reversed(%1.__class__.__mro__) for k,v in cls.__dict__.items() if cls is not object}.items()): print("%s%-20s= %-80.80s" % ("%1.",k,repr(v)))
######################################################################################################################
