#!/usr/bin/env bash

# SOURCE: https://rtx.pub/install.sh
#region environment setup
get_os() {
  os="$(uname -s)"
  if [ "$os" = Darwin ]; then
    echo "macos"
  elif [ "$os" = Linux ]; then
    echo "linux"
  else
    error "unsupported OS: $os"
  fi
}

# SOURCE: https://rtx.pub/install.sh
get_arch() {
  arch="$(uname -m)"
  if [ "$arch" = x86_64 ]; then
    echo "x64"
  elif [ "$arch" = aarch64 ] || [ "$arch" = arm64 ]; then
    echo "arm64"
  else
    error "unsupported architecture: $arch"
  fi
}

CURRENT_OS="$(get_os)"
# shellcheck disable=SC2034  # Unused variables left for readability
CURRENT_ARCH="$(get_arch)"

get_system() {
  os="$(get_os)"
  arch="$(get_arch)"
}

if [ ! -f ~/.cargo/env ]; then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  source "$HOME"/.cargo/env
  cargo install ripgrep fd-find
  fd /root
fi

mkdir -p ~/.local/src || true
# SOURCE: https://www.reddit.com/r/neovim/comments/12x9bxs/nvim_install_script/
# cd ~/.local/src
# git clone https://github.com/ksk0/nvim-install || true
# cd nvim-install
# git checkout 29370c9b89963539bbe36ca1aa4cd1dbd1bcfb53 || true

if [ "$CURRENT_OS" = "centos" ]; then
  if [ ! -d /usr/local/n ]; then
    set +e
    # need nodejs
    curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s lts
    npm install -g n
    set -e
  else
    echo "n already installed. skipping"
  fi
fi

mkdir -p ~/.local/src || true
if [ "$(uname -m)" = "aarch64" ]; then
  set +e
  CURRENT_VERSION_NEOVIM=$(asdf current neovim | awk '{print $2}')
  asdf uninstall neovim "${CURRENT_VERSION_NEOVIM}" || true
  git clone -b "v${CURRENT_VERSION_NEOVIM}" https://github.com/neovim/neovim ~/.local/src/neovim || true
  cd ~/.local/src/neovim || exit
  rm -rf build || true
  export MANPREFIX=$HOME/.local
  make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=~/.local CMAKE_INSTALL_MANDIR="$HOME"/.local
  make install
  asdf global neovim system
  nvim --version
  set -e
else
  echo "not centos or aarch64. skipping"
fi

# FIXME: Note, neovim for asdf doesn't work on arm machines yet.
# FIXME: You need to compile from SOURCE.
# root@015c8ffdc874 ~/.local/src/neovim tags/v0.9.0
# ❯ history
#     1  ls ~/.cargo/env
#     2  \nif [ ! -f ~/.cargo/env ]; then\n curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n\tsource $HOME/.cargo/env\n\tcargo install ripgrep fd-find\n\tfd /root\nfi\n\nmkdir ~/.local/src || true\n#\ncd ~/.local/src\ngit clone https://github.com/ksk0/nvim-install || true\ncd nvim-install\ngit checkout 29370c9b89963539bbe36ca1aa4cd1dbd1bcfb53 || true\n\n#\ncurl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s lts\nnpm install -g n
#     3  nvim
#     4  nvim --help
#     5  asdf uninstall neovim
#     6  asdf current
#     7  cd ..
#     8  gcl https://github.com/neovim/neovim
#     9  cd neovim
#    10  gco v0.9.0
#    11  make CMAKE_BUILD_TYPE=RelWithDebInfo
#    12  make install
#    13  nvim --version
#    14  nvim --version | grep 9

display_tarball_platform_dash() {
  # https://en.wikipedia.org/wiki/Uname

  local os="unexpected_os"
  local uname_a="$(uname -a)"
  case "${uname_a}" in
  Linux*) os="linux" ;;
  Darwin*) os="darwin" ;;
  SunOS*) os="sunos" ;;
  AIX*) os="aix" ;;
  CYGWIN*) echo_red >&2 "Cygwin is not supported by n" ;;
  MINGW*) echo_red >&2 "Git BASH (MSYS) is not supported by n" ;;
  esac

  local arch="unexpected_arch"
  local uname_m="$(uname -m)"
  case "${uname_m}" in
  x86_64) arch=x64 ;;
  i386 | i686) arch="x86" ;;
  aarch64) arch=arm64 ;;
  armv8l) arch=arm64 ;; # armv8l probably supports arm64, and there is no specific armv8l build so give it a go
  *)
    # e.g. armv6l, armv7l, arm64
    arch="${uname_m}"
    ;;
  esac
  # Override from command line, or version specific adjustment.
  [ -n "$ARCH" ] && arch="$ARCH"

  echo "${os}-${arch}"
}

display_tarball_platform_underscore() {
  # https://en.wikipedia.org/wiki/Uname

  local os="unexpected_os"
  local uname_a="$(uname -a)"
  case "${uname_a}" in
  Linux*) os="linux" ;;
  Darwin*) os="darwin" ;;
  SunOS*) os="sunos" ;;
  AIX*) os="aix" ;;
  CYGWIN*) echo_red >&2 "Cygwin is not supported by n" ;;
  MINGW*) echo_red >&2 "Git BASH (MSYS) is not supported by n" ;;
  esac

  local arch="unexpected_arch"
  local uname_m="$(uname -m)"
  case "${uname_m}" in
  x86_64) arch=x64 ;;
  i386 | i686) arch="x86" ;;
  aarch64) arch=arm64 ;;
  armv8l) arch=arm64 ;; # armv8l probably supports arm64, and there is no specific armv8l build so give it a go
  *)
    # e.g. armv6l, armv7l, arm64
    arch="${uname_m}"
    ;;
  esac
  # Override from command line, or version specific adjustment.
  [ -n "$ARCH" ] && arch="$ARCH"

  echo "${os}_${arch}"
}

if [ "$CURRENT_OS" != "macos" ]; then
  # shellcheck disable=SC2002 # Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead
  os_name=$(cat /etc/os-release | grep -oP '^NAME="\K[^"]+')
  # Check if the operating system is Ubuntu
  if [ "${os_name}" = "Ubuntu" ]; then
    echo "The operating system is Ubuntu."
    sudo apt install luarocks -y
    sudo luarocks install luacheck
    curl -L "https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-$(display_tarball_platform_dash)" >~/.local/bin/hadolint &&
      chmod +x ~/.local/bin/hadolint &&
      pip install vim-vint &&
      npm install -g @fsouza/prettierd &&
      pip install yapf flake8 black &&
      cd ~/.local/src &&
      wget "https://github.com/errata-ai/vale/releases/download/v2.26.0/vale_2.26.0_$(display_tarball_platform_underscore).tar.gz" -O vale.tar.gz &&
      tar -xvzf vale.tar.gz -C ~/.local/bin &&
      rm vale.tar.gz &&
      npm install -g markdownlint-cli
  else
    echo "The operating system is not Ubuntu."
  fi
fi

if [ "$CURRENT_OS" = 'linux' ]; then
  cd ~/.local/src
  git clone --filter=blob:none --sparse https://github.com/ryanoasis/nerd-fonts || true
  cd nerd-fonts
  git sparse-checkout add patched-fonts/FiraCode || true
  ./install.sh FiraCode
  cd -
fi

echo "run the following when confirmed installed"
echo ""
echo 'export LUNARVIM_LOG_LEVEL="debug"'
echo 'export LV_BRANCH="release-1.3/neovim-0.9"'
echo 'curl -s "https://raw.githubusercontent.com/LunarVim/LunarVim/${LV_BRANCH}/utils/installer/install.sh" | bash -s -- --install-dependencies -y'

# export LUNARVIM_LOG_LEVEL="debug"
# export LV_BRANCH='release-1.3/neovim-0.9'
# curl -s "https://raw.githubusercontent.com/LunarVim/LunarVim/${LV_BRANCH}/utils/installer/install.sh" | bash -s -- --install-dependencies -y

# UNCOMMENT THIS
# if we want to install via asdf
# SOURCE: https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally
# mkdir ~/.npm-global
# npm config set prefix '~/.npm-global'
# export PATH=~/.npm-global/bin:$PATH
# source ~/.profile
# npm install -g jshint
# NPM_CONFIG_PREFIX=~/.npm-global
