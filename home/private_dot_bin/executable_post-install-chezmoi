#!/usr/bin/env bash

# SOURCE: https://rtx.pub/install.sh
#region environment setup
detect_platform() {
  case "$(uname -s)" in
    Darwin*)
      PLATFORM="macos"
      ;;
    Linux*)
      PLATFORM="linux"
      # Detect specific Linux distribution
      if [ -f /etc/os-release ]; then
        . /etc/os-release
        case "$ID" in
          debian|ubuntu)
            LINUX_DISTRO="$ID"
            ;;
          centos|rhel|rocky|almalinux|ol)
            LINUX_DISTRO="centos"
            ;;
          *)
            echo "Unsupported Linux distribution: $ID"
            echo "This script supports Debian, Ubuntu, and CentOS/RHEL-based distributions"
            ;;
        esac
      else
        echo "Cannot detect Linux distribution"
      fi
      ;;
    *)
      echo "Unsupported platform: $(uname -s)"
      echo "This script only supports macOS and Linux"
      ;;
  esac
}

get_os() {
  detect_platform
  echo "$PLATFORM"
}

# SOURCE: https://rtx.pub/install.sh
get_arch() {
  arch="$(uname -m)"
  if [ "$arch" = x86_64 ]; then
    echo "x64"
  elif [ "$arch" = aarch64 ] || [ "$arch" = arm64 ]; then
    echo "arm64"
  else
    error "unsupported architecture: $arch"
  fi
}

detect_platform
CURRENT_OS="$PLATFORM"
# shellcheck disable=SC2034  # Unused variables left for readability
CURRENT_ARCH="$(get_arch)"

get_system() {
  detect_platform
  os="$PLATFORM"
  arch="$(get_arch)"
}

if [ ! -f ~/.cargo/env ]; then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  source "$HOME"/.cargo/env
  if [ "$CURRENT_OS" != "macos" ]; then
    # Check if the operating system is Ubuntu or CentOS
    if [ "$LINUX_DISTRO" = "ubuntu" ] || [ "$LINUX_DISTRO" = "debian" ]; then
      echo "The operating system is $LINUX_DISTRO. Install rust package deps"
      sudo apt install build-essential libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev -y
    elif [ "$LINUX_DISTRO" = "centos" ]; then
      echo "The operating system is CentOS/RHEL-based. Install rust package deps"
      sudo dnf groupinstall "Development Tools" -y
      sudo dnf install libxcb-devel libxcb-render-devel libxcb-shape-devel libxcb-xfixes-devel -y
      sudo dnf install lua-devel -y
    fi
  fi

  cargo install ripgrep fd-find
  cargo install lms
  cargo install procs
  cargo install bandwhich
  cargo install sd
  cargo install lms
  cargo install tre-command
  cargo install procs
  cargo install gping
  cargo install dua-cli
  cargo install --git https://github.com/bvaisvil/zenith.git
  cargo install bottom
  cargo install hexyl
  cargo install silicon
  cargo install --locked --features clipboard broot
  cargo install skim
  cargo install viu
  cargo install diskonaut
  cargo install git-delta
  cargo install du-dust
  cargo install mdcat
  cargo install yj
  # cargo install meli # email client
  # A new way to see and navigate directory trees : https://dystroy.org/broot
  cargo install --locked --features clipboard broot
  export PATH="${HOME}/.cargo/bin:$PATH"
  fd /root
fi

mkdir -p ~/.local/src || true
# SOURCE: https://www.reddit.com/r/neovim/comments/12x9bxs/nvim_install_script/
# cd ~/.local/src
# git clone https://github.com/ksk0/nvim-install || true
# cd nvim-install
# git checkout 29370c9b89963539bbe36ca1aa4cd1dbd1bcfb53 || true

if [ "$CURRENT_OS" != "macos" ]; then
  if [ "$LINUX_DISTRO" = "centos" ]; then
    if [ ! -d /usr/local/n ]; then
      set +e
      # need nodejs
      curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s lts
      npm install -g n
      set -e
    else
      echo "n already installed. skipping"
    fi
  fi
fi

mkdir -p ~/.local/src || true
if [ "$(uname -m)" = "aarch64" ]; then
  set +e
  CURRENT_VERSION_NEOVIM=$(asdf current neovim | awk '{print $2}')
  asdf uninstall neovim "${CURRENT_VERSION_NEOVIM}" || true
  git clone -b "v${CURRENT_VERSION_NEOVIM}" https://github.com/neovim/neovim ~/.local/src/neovim || true
  cd ~/.local/src/neovim || exit
  rm -rf build || true
  export MANPREFIX=$HOME/.local
  make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=~/.local CMAKE_INSTALL_MANDIR="$HOME"/.local
  make install
  asdf global neovim system
  nvim --version
  set -e
else
  echo "not centos or aarch64. skipping"
fi

display_tarball_platform_dash() {
  # https://en.wikipedia.org/wiki/Uname

  local os="unexpected_os"
  local uname_a="$(uname -a)"
  case "${uname_a}" in
  Linux*) os="linux" ;;
  Darwin*) os="darwin" ;;
  SunOS*) os="sunos" ;;
  AIX*) os="aix" ;;
  CYGWIN*) echo_red >&2 "Cygwin is not supported by n" ;;
  MINGW*) echo_red >&2 "Git BASH (MSYS) is not supported by n" ;;
  esac

  local arch="unexpected_arch"
  local uname_m="$(uname -m)"
  case "${uname_m}" in
  x86_64) arch=x64 ;;
  i386 | i686) arch="x86" ;;
  aarch64) arch=arm64 ;;
  armv8l) arch=arm64 ;; # armv8l probably supports arm64, and there is no specific armv8l build so give it a go
  *)
    # e.g. armv6l, armv7l, arm64
    arch="${uname_m}"
    ;;
  esac
  # Override from command line, or version specific adjustment.
  [ -n "$ARCH" ] && arch="$ARCH"

  echo "${os}-${arch}"
}

display_tarball_platform_underscore() {
  # https://en.wikipedia.org/wiki/Uname

  local os="unexpected_os"
  local uname_a="$(uname -a)"
  case "${uname_a}" in
  Linux*) os="linux" ;;
  Darwin*) os="darwin" ;;
  SunOS*) os="sunos" ;;
  AIX*) os="aix" ;;
  CYGWIN*) echo_red >&2 "Cygwin is not supported by n" ;;
  MINGW*) echo_red >&2 "Git BASH (MSYS) is not supported by n" ;;
  esac

  local arch="unexpected_arch"
  local uname_m="$(uname -m)"
  case "${uname_m}" in
  x86_64) arch=x64 ;;
  i386 | i686) arch="x86" ;;
  aarch64) arch=arm64 ;;
  armv8l) arch=arm64 ;; # armv8l probably supports arm64, and there is no specific armv8l build so give it a go
  *)
    # e.g. armv6l, armv7l, arm64
    arch="${uname_m}"
    ;;
  esac
  # Override from command line, or version specific adjustment.
  [ -n "$ARCH" ] && arch="$ARCH"

  echo "${os}_${arch}"
}

if [ "$CURRENT_OS" != "macos" ]; then
  # Check if the operating system is Ubuntu or CentOS
  if [ "$LINUX_DISTRO" = "ubuntu" ] || [ "$LINUX_DISTRO" = "debian" ]; then
    echo "The operating system is $LINUX_DISTRO."
    sudo apt install luarocks neofetch -y
    sudo luarocks install luacheck
    curl -L "https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-$(display_tarball_platform_dash)" >~/.local/bin/hadolint && \
      chmod +x ~/.local/bin/hadolint && \
      pip install vim-vint && \
      npm install -g @fsouza/prettierd && \
      pip install yapf flake8 black && \
      cd ~/.local/src && \
      wget "https://github.com/errata-ai/vale/releases/download/v2.26.0/vale_2.26.0_$(display_tarball_platform_underscore).tar.gz" -O vale.tar.gz && \
      tar -xvzf vale.tar.gz -C ~/.local/bin && \
      rm vale.tar.gz && \
      npm install -g markdownlint-cli
  elif [ "$LINUX_DISTRO" = "centos" ]; then
    echo "The operating system is CentOS/RHEL-based."
    # Install EPEL repository for additional packages
    sudo dnf install epel-release -y
    sudo dnf install luarocks neofetch -y
    sudo dnf install lua-devel -y
    sudo luarocks install luacheck
    curl -L "https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-$(display_tarball_platform_dash)" >~/.local/bin/hadolint && \
      chmod +x ~/.local/bin/hadolint && \
      pip install vim-vint && \
      npm install -g @fsouza/prettierd && \
      pip install yapf flake8 black && \
      cd ~/.local/src && \
      wget "https://github.com/errata-ai/vale/releases/download/v2.26.0/vale_2.26.0_$(display_tarball_platform_underscore).tar.gz" -O vale.tar.gz && \
      tar -xvzf vale.tar.gz -C ~/.local/bin && \
      rm vale.tar.gz && \
      npm install -g markdownlint-cli
  else
    echo "The operating system is not supported: $LINUX_DISTRO"
  fi
fi

if [ "$CURRENT_OS" = 'linux' ]; then
  cd ~/.local/src

  mkdir -p ~/.local/share/fonts || true
  cd ~/.local/share/fonts
  curl -fLO https://github.com/ryanoasis/nerd-fonts/raw/refs/heads/master/patched-fonts/FiraCode/Regular/FiraCodeNerdFont-Regular.ttf
  cd ~/.local/src

  sudo git clone https://github.com/bossjones/debug-tools /usr/local/src/debug-tools || true
  sudo chown $(whoami):$(whoami) -R /usr/local/src/debug-tools
  cd /usr/local/src/debug-tools
  ./update-bossjones-debug-tools
  install-tmux.sh
  cd -
  mkdir ~/.tmuxinator || true 2>/dev/null

  cat <<"EOF" >~/.tmuxinator/zsh.yml
# ~/.tmuxinator/zsh.yml
name: zsh
root: ~/

# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.
# pre_window: exec zsh -l

windows:
  - neofetch:
      layout: 9fa4,223x75,0,0{118x75,0,0[118x52,0,0{59x52,0,0,8,58x52,60,0,13},118x22,0,53,12],104x75,119,0[104x16,119,0,1,104x15,119,17,9,104x22,119,33,2,104x19,119,56,3]}
      panes:
        - neofetch:
          - neofetch
EOF
fi

pip install pyvideothumbnailer || true

if [ "$CURRENT_OS" = "macos" ]; then
  brew install cmake || true  # macos image has cmake installed, but a new version may exist; ignore it if so
  brew install doxygen || true
  brew install hdf5 || true
  brew install pkg-config || true
  brew install wget || true
  brew install jpeg || true
  brew install libpng || true
  brew install libtiff || true
  brew install openexr || true
  brew install eigen || true
  brew install tbb || true
  brew install hdf5 || true

  # pytorch
  brew install openblas || true
  brew install libomp || true
  brew install openmpi || true
  brew install tcl-tk || true

  brew install readline || true
  brew install sqlite3 || true
  brew install xz || true
  brew install zlib || true

  # https://techblog.willshouse.com/2013/05/20/brew-install-gnu-stat/
  brew install coreutils || true
  brew install findutils || true
  brew install gnu-tar || true
  brew install gnu-sed || true
  brew install gawk || true
  brew install gnutls || true
  brew install gnu-getopt || true
  brew install libmagic || true
  brew install libffi || true
  brew install atomicparsley || true
  brew install tree || true
  brew install tesseract || true

  brew install openssl || true
  brew install readline || true
  brew install sqlite3 || true
  brew install xz || true
  brew install zlib || true
  brew install font-fira-code || true
  brew install font-fira-code-nerd-font || true

  brew install font-droid-sans-mono-nerd-font || true
  brew install font-fira-code || true
  brew install font-fira-code-nerd-font || true
  brew install font-fira-mono-nerd-font || true
  brew install font-fontawesome || true
  brew install font-hack-nerd-font || true
  brew install font-inconsolata-nerd-font || true
  brew install font-jetbrains-mono-nerd-font || true
  brew install font-liberation || true
  brew install font-liberation-nerd-font || true
  brew install font-meslo-lg-nerd-font || true
  brew install font-mononoki-nerd-font || true
  brew install font-noto-color-emoji || true
  brew install font-noto-emoji || true
  brew install font-noto-nerd-font || true
  brew install font-sauce-code-pro-nerd-font || true
  brew install font-symbols-only-nerd-font || true
  brew install font-ubuntu-mono-nerd-font || true
  brew install font-ubuntu-nerd-font || true
  brew install font-victor-mono-nerd-font || true
  brew install repomix pstree imagemagick uv fdupes || true
  brew install ffmpeg tesseract || true
  brew install libmagic || true
  brew install libffi || true
  brew install atomicparsley || true
  brew install tree || true
  brew install tesseract || true
  brew install graphicsmagick || true


  # https://github.com/jiaaro/pydub#installation
  # libav
  # brew install libav || true
  brew install just || true

  brew install highlight || true
  brew install htop || true
  brew install http-prompt || true
  brew install httpie || true
  brew install httpstat || true
  brew install hub || true
  brew install hyperfine || true
  brew install iftop || true
  brew install liblqr || true
  brew install libraw || true
  brew install imagemagick || true
  brew install graphviz || true
  brew install libmediainfo bc || true
  brew install ffmpeg || true
  brew install --verbose bossjones/tap/ffmpeg@6.0 || true

fi


echo "run the following when confirmed installed"
echo ""
echo 'export LUNARVIM_LOG_LEVEL="debug"'
echo 'export LV_BRANCH="release-1.4/neovim-0.9"'
echo 'curl -s "https://raw.githubusercontent.com/LunarVim/LunarVim/${LV_BRANCH}/utils/installer/install.sh" | bash -s -- --install-dependencies -y'
echo "curl -L 'https://raw.githubusercontent.com/bossjones/lunarvim-config/main/config-simple.lua' > ~/.config/lvim/config.lua"
echo "lvim"

cargo install git-delta || true
