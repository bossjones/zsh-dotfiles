#!/usr/bin/env bash

# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# set -euox pipefail
# set -e

# NOTE: Scaling up an image to have padded space between top and bottom is call letterboxing.
# NOTE: Scaling up an image to have padded space between left and right is call pillarboxing.

# https://gist.github.com/jonsuh/3c89c004888dfc7352be
# ----------------------------------
# Colors
# ----------------------------------
export NOCOLOR='\033[0m'
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export ORANGE='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export LIGHTGRAY='\033[0;37m'
export DARKGRAY='\033[1;30m'
export LIGHTRED='\033[1;31m'
export LIGHTGREEN='\033[1;32m'
export YELLOW='\033[1;33m'
export LIGHTBLUE='\033[1;34m'
export LIGHTPURPLE='\033[1;35m'
export LIGHTCYAN='\033[1;36m'
export WHITE='\033[1;37m'

# SOURCE: https://coderwall.com/p/--eiqg/exponential-backoff-in-bash
# Retries a command a with backoff.
#
# The retry count is given by ATTEMPTS (default 5), the
# initial backoff timeout is given by TIMEOUT in seconds
# (default 1.)
#
# Successive backoffs double the timeout.
#
# Beware of set -e killing your whole script!
# function with_backoff {
max_attempts=${ATTEMPTS-5}
timeout=${TIMEOUT-1}
attempt=0
exitCode=0

while [[ $attempt < $max_attempts ]]
do
  "$@"
  exitCode=$?

  if [[ $exitCode == 0 ]]
  then
    break
  fi

  echo -e "${RED}[exponential_backoff]${NOCOLOR} Failure! Retrying in $timeout.." 1>&2
  sleep $timeout
  attempt=$(( attempt + 1 ))
  timeout=$(( timeout * 2 ))
done

if [[ $exitCode != 0 ]]
then
  echo -e "${RED}[exponential_backoff]${NOCOLOR} You've failed me for the last time! ($@)" 1>&2
fi

exit $exitCode
# }
