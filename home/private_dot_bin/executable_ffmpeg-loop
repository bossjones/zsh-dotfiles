#!/usr/bin/env bash

# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# set -euox pipefail
set -e

# NOTE: Scaling up an image to have padded space between top and bottom is call letterboxing.
# NOTE: Scaling up an image to have padded space between left and right is call pillarboxing.

# https://gist.github.com/jonsuh/3c89c004888dfc7352be
# ----------------------------------
# Colors
# ----------------------------------
export NOCOLOR='\033[0m'
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export ORANGE='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export LIGHTGRAY='\033[0;37m'
export DARKGRAY='\033[1;30m'
export LIGHTRED='\033[1;31m'
export LIGHTGREEN='\033[1;32m'
export YELLOW='\033[1;33m'
export LIGHTBLUE='\033[1;34m'
export LIGHTPURPLE='\033[1;35m'
export LIGHTCYAN='\033[1;36m'
export WHITE='\033[1;37m'

while getopts ":hf:c:" opt; do
  case ${opt} in
    h ) # process option h
      ;;
    f ) # process option f
      filename_val=$OPTARG
      ;;
    c ) # common_name
      common_name=$OPTARG
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
  esac
done

# export input_file="${filename_val}"
# export full_path_input_file="$(pwd)/${filename_val}"
# export get_extension=$(basename -- $input_file | cut -d"." -f2)

# generate a common name when one isn't passed in from outside the script
if [[ x"$common_name" = x"" ]]; then
    echo -e " ${BLUE}[ffmpeg-loop]${NOCOLOR} common_name='is empty'"
    export input_file="${filename_val}"
    export full_path_input_file="$(pwd)/${input_file}"
    export get_extension=$(basename -- $input_file | cut -d"." -f2)
    export fname_common="$(uuidgen).${get_extension}"
    export full_path_input_file="${fname_common}"
    export full_path_output_file="loop-${fname_common}"
    # export full_path_input_file="$(pwd)/${fname_common}"
else
    echo -e " ${BLUE}[ffmpeg-loop]${NOCOLOR} common_name='set', overriding variable names"
    export input_file="${filename_val}"
    export full_path_input_file="$(pwd)/${input_file}"
    export get_extension=$(basename -- $input_file | cut -d"." -f2)
    export fname_common="${common_name}"
    export full_path_output_file="loop-${fname_common}"
fi
export font_location='/Volumes/Macintosh HD/System/Library/Fonts/Helvetica.ttc'

tmpfile=$(mktemp /tmp/abc-script.XXXXXX)
echo -e " ${BLUE}[ffmpeg-loop]${NOCOLOR} tmpfile=${tmpfile}"

cat << EOF > "${tmpfile}"
echo -e " ${GREEN}[ffmpeg-loop]${NOCOLOR} ${CYAN}looping${NOCOLOR} video ${YELLOW}full_path_input_file:${full_path_input_file}${NOCOLOR} writing out ${YELLOW}file:${full_path_output_file}${NOCOLOR}"
ffmpeg -hide_banner -loglevel warning -f concat -safe 0 -i <(for i in {1..4}; do printf "file '%s'\n" ${full_path_input_file}; done) -c copy ${full_path_output_file}
EOF

echo -e " ${BLUE}[ffmpeg-loop]${NOCOLOR} cat ${tmpfile}"
cat "${tmpfile}"

bash "${tmpfile}"

rm "$tmpfile"


# OLD SCRIPT
# #!/usr/bin/env bash

# if [[ x"$1" = x"" ]]; then
#     echo " [ffmpeg-loop] missing file to loop, try with ffmpeg-loop <FILENAME>"
#     exit 1
# fi

# export input_file="${1}"
# export full_path_input_file="$(pwd)/${1}"
# export full_path_output_file="loop_$(uuidgen).mp4"

# ffmpeg -f concat -safe 0 -i <(for i in {1..4}; do printf "file '%s'\n" ${full_path_input_file}; done) -c copy ${full_path_output_file}

# return ${full_path_output_file}



