#!/usr/bin/env bash
set -x

# SOURCE: https://github.com/philkuz/pixie/blob/main/experimental/bcc_perf/bcc_commands.sh

# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0


# Warn that some commands will not be run if the script is not run as root.
if [[ $EUID -ne 0 ]]; then
  RUN_AS_ROOT=false
  printf "Certain commands will not be run without sudo privileges. To run as root, run the same command prepended with 'sudo', for example: $ sudo $0\n\n" | fold -s -w 80
else
  RUN_AS_ROOT=true
  # Update existing `sudo` timestamp until `.osx` has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>&1 &
fi

# interval_secs=2
# capture_secs=10
# outdir="output"
usage() {
  echo "Usage: $0 [-i interval in secs to store data] [-t time for capture in seconds] \
  [-o output directory under /usr/share/bcc/tools (will be extended with a timestamp)]"
  exit 2
}

# Input options
# interval_secs is the interval at which data should be printed to the output file
# capture_secs is the duration for which data should be collected
# outdir is the directory under /usr/share/tools/bcc where output data will be stored

while getopts 'hi:t:o:' c; do
  case $c in
  h) usage ;;
  i)
    interval_secs=$OPTARG
    echo "Script will collect data at intervals of $interval_secs secs."
    ;;
  t)
    capture_secs=$OPTARG
    echo "Script will collect data for $capture_secs secs. before exiting"
    ;;
  o)
    outdir=${OPTARG}_$(date +%Y_%m_%d_%H_%M_%S)
    echo "Results will be stored in /usr/share/bcc/tools/$outdir"
    ;;
  :) usage ;;
  esac
done


if [ -z "$interval_secs" ]; then interval_secs=2; fi
if [ -z "$capture_secs" ]; then capture_secs=120; fi
if [ -z "$outdir" ]; then outdir="output"; fi

# SOURCE: https://github.com/sjitech/docker-geek/blob/62b325b4d3471a387565a7d574c8e0324c164c3f/scripts/docker-execsnoop#L4
[[ -e /sys/kernel/debug/tracing ]] || mount -t debugfs debugfs /sys/kernel/debug
# mount -t debugfs none || exit /sys/kernel/debug
cd /usr/share/bcc/tools || exit
mkdir -p bcc_data
mkdir -p "$outdir"

set -euox pipefail
env >> ./"$outdir"/env.txt
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/cachestat -T "$interval_secs" >> ./"$outdir"/cachestat.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/execsnoop >> ./"$outdir"/execsnoop.txt 2>&1 &
/bin/python3 /usr/share/bcc/tools/opensnoop -d "$capture_secs" >> ./"$outdir"/opensnoop.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/ext4slower >> ./"$outdir"/ext4slower.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/biolatency >> ./"$outdir"/biolatency.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/biosnoop >> ./"$outdir"/biosnoop.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/tcpconnect >> ./"$outdir"/tcpconnect.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/tcpaccept >> ./"$outdir"/tcpaccept.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/tcpretrans >> ./"$outdir"/tcpretrans.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/runqlat >> ./"$outdir"/runqlat.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/profile >> ./"$outdir"/profile.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/funccount 'vfs_*' >> ./"$outdir"/funccount_vfs.txt 2>&1 &
timeout -s SIGINT "$capture_secs" /bin/python3 /usr/share/bcc/tools/funccount 'c:malloc_*' >> ./"$outdir"/funccount_malloc.txt 2>&1 &
lsof >> ./"$outdir"/lsof.txt 2>&1 &
ps auxef >> ./"$outdir"/ps.txt 2>&1 &
dpkg -l >> ./"$outdir"/dpkg.txt 2>&1 &
docker ps --no-trunc >> ./"$outdir"/docker.txt 2>&1 &

# show the list of jobs ([job-id] priority status command)
jobs
jobs -r

sleep $(expr "$capture_secs" + 60)
mkdir -p bcc_data/"$outdir"
# # gcsfuse takes its sweet time to create a directory
sleep 10
cp -rf "$outdir"/*.txt bcc_data/"$outdir"/
sync -f bcc_data/"$outdir"/*.txt
chown pi:pi -R bcc_data
tree /usr/share/bcc/tools/bcc_data
ls -ltah /usr/share/bcc/tools/bcc_data/output

echo "To see the report, run the following: "
echo find /usr/share/bcc/tools/bcc_data -type f -name '*.txt' -exec bat {} \\\;
