name: GitHub Actions CI
on:
  push:
    branches:
      - main
      - master
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  #  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
  # workflow_dispatch:
  #  # Allow this workflow to be run manually (pushing to testpypi instead of pypi)
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)
        required: false
        default: "false"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number|| github.sha }}
  cancel-in-progress: true
jobs:
  tests:
    runs-on: macos-14
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - name: Set up Git repository
        # uses: actions/checkout@main
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements-test.txt'

      - uses: actions/setup-go@v5
        with:
          go-version: '1.20.5' # The Go version to download (if necessary) and use.
      - run: go version

      - name: brew taps
        run: |
            brew tap schniz/tap || true

      - name: Run zsh-dotfiles-prep
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_DEBUG: 1
          # NOTE: Skip Brew bundle for now, speed up tests
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
        run: |
            brew tap schniz/tap || true
            brew install wget || true
            brew install curl || true
            brew install kadwanev/brew/retry || true
            brew install go || true

            { echo "$HOME/bin"; echo "$HOME/.bin"; echo "$HOME/.local/bin"; } >> "${GITHUB_PATH}"
            export PATH="${HOME}/.bin:${HOME}/bin:${HOME}/.local/bin:${PATH}"

            wget https://raw.githubusercontent.com/bossjones/zsh-dotfiles-prep/main/bin/zsh-dotfiles-prereq-installer
            chmod +x zsh-dotfiles-prereq-installer
            retry -t 4  -- ./zsh-dotfiles-prereq-installer --debug

            # curl -fsSL https://raw.githubusercontent.com/bossjones/zsh-dotfiles-prep/main/bin/zsh-dotfiles-prereq-installer | bash -s -- --debug

      - name: Rerun zsh-dotfiles-prep
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_DEBUG: 1
          # NOTE: Skip Brew bundle for now, speed up tests
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
        run: |
            brew tap schniz/tap || true
            brew install wget || true
            brew install curl || true
            brew install go || true
            brew install trash || true

            { echo "$HOME/bin"; echo "$HOME/.bin"; echo "$HOME/.local/bin"; } >> "${GITHUB_PATH}"
            export PATH="${HOME}/.bin:${HOME}/bin:${HOME}/.local/bin:${PATH}"

            wget https://raw.githubusercontent.com/bossjones/zsh-dotfiles-prep/main/bin/zsh-dotfiles-prereq-installer
            chmod +x zsh-dotfiles-prereq-installer
            retry -t 4  -- ./zsh-dotfiles-prereq-installer --debug

            # curl -fsSL https://raw.githubusercontent.com/bossjones/zsh-dotfiles-prep/main/bin/zsh-dotfiles-prereq-installer | bash -s -- --debug

      - name: full chezmoi install
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_DEBUG: 1
          # NOTE: Skip Brew bundle for now, speed up tests
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
        run: |
          # set -x;pwd
          # set -x;ls -lta
          # set -x;ls -lta ~/.bin
          # set +x

          { echo "$HOME/bin"; echo "$HOME/.bin"; echo "$HOME/.local/bin"; } >> "${GITHUB_PATH}"
          export PATH="${HOME}/.bin:${HOME}/bin:${HOME}/.local/bin:${PATH}"


          retry -t 4  -- "$HOME/.bin/chezmoi" init -R --debug -v --apply --force --source=.

          retry -t 4  -- post-install-chezmoi

          export LUNARVIM_LOG_LEVEL="debug"
          export LV_BRANCH="release-1.3/neovim-0.9"
          curl -s "https://raw.githubusercontent.com/LunarVim/LunarVim/${LV_BRANCH}/utils/installer/install.sh" | bash -s -- --install-dependencies -y

      # Allow debugging with tmate
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          # Use registered public SSH key(s)
          # If you have registered one or more public SSH keys with your GitHub profile, tmate will be started such that only those keys are authorized to connect, otherwise anybody can connect to the tmate session. If you want to require a public SSH key to be installed with the tmate session, no matter whether the user who started the workflow has registered any in their GitHub profile, you will need to configure the setting limit-access-to-actor to true, like so:
          limit-access-to-actor: true

      - name: pytest
        # env:
        #   # Unlike the above, we are actually distributing these
        #   # wheels, so they need to be built for production use.
        #   CPPFLAGS: "-O3 -flto -ffunction-sections"
        #   CFLAGS:   "-O3 -flto -ffunction-sections"
        #   # Build for both architectures
        #   ARCHFLAGS: "-arch x86_64 -arch arm64"
        run: |
          # Removed 'exec zsh' to prevent script termination
          zsh -c '
          { echo "$HOME/bin"; echo "$HOME/.bin"; echo "$HOME/.local/bin"; } >> "${GITHUB_PATH}"
          export PATH="${HOME}/.bin:${HOME}/bin:${HOME}/.local/bin:${PATH}"
          pwd
          ls -lta
          python -m venv venv
          source ./venv/bin/activate
          pip install -U pip setuptools wheel
          pip install -U -r requirements-test.txt
          export ASDF_DIR="${HOME}/.asdf"
          export ASDF_COMPLETIONS="$ASDF_DIR/completions"
          . "$HOME/.asdf/asdf.sh"
          # export PATH="$HOME/.asdf/shims:$HOME/.asdf/bin:$PATH"
          echo "$HOME/.asdf/bin" >> "${GITHUB_PATH}"
          echo "$HOME/.asdf/shims" >> "${GITHUB_PATH}"

          make test
          '
